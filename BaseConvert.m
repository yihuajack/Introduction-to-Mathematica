(* ::Package:: *)

(* ::Input:: *)
(*BeginPackage["BaseConvert`"]*)
(*DefaultBase::usage="Default base used by StringToInt."*)
(*StringToInt::usage="StringToInt[str,b] converts str to*)
(*an integer, assuming it is written in base b.*)
(*StringToInt[str] is equivalent to StringToInt[str,*)
(*DefaultBase]."*)
(*Begin["`Private`"]*)
(*DefaultBase=10;*)
(*StringToInt[str_]:=StringToInt[str, DefaultBase]*)
(*StringToInt[str_String,b_Integer]:=*)
(*Which[Not[2<=b<=10],*)
(*Print["StringToInt: second argument is*)
(*inappropriate base."],*)
(*Not[Apply[And,Map[(0<numeralToInt[#]<b)&,*)
(*ToCharacterCode[str]]]],*)
(*Print["StringToInt: first argument has*)
(*Incorrect digits."],*)
(*True,  (* arguments are legal *)*)
(*Map[numeralToInt,ToCharacterCode[str]].*)
(*Table[b^i,{i,StringLength[str]-1,0,-1}]]*)
(*StringToInt[str_,b_]:=*)
(*(If[Not[StringQ[str]],*)
(*Print["StringToInt: ",str," is not a string."]];*)
(*If[Not[IntegerQ[b]],*)
(*Print["StringToInt: ",b," is not an integer."]])*)
(*StringToInt[x___]:=*)
(*Print["StringToInt: called with ",Length[{x}],*)
(*" arguments; 1 or 2 arguments are expected."]*)
(*numeralToInt[numeral_]:=*)
(*numeral-ToCharacterCode["0"][[1]]*)
(*End[]*)
(*EndPackage[]*)
